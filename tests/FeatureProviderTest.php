<?php

use Faker\Factory;
use FeedFaker\Providers\FeatureProvider;


class FeatureProviderTest extends PHPUnit_Framework_TestCase
{
    public $faker;

    public function setUp()
    {
        $this->faker = Factory::create();
        $this->faker->addProvider(new FeatureProvider($this->faker));
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testItReturnsData()
    {
        $access_values = [
            '2+ Access Exits',
            '32 Inch Doors',
            '48 Inch Halls',
            'Chairlift',
            'Kitchen Modifications',
            'Handicap Access',
            'Flashing Doorbell',
            'Flooring Modifications',
            'Parking',
            'Wheelchair Access',
            'Wheelchair Adaptable',
            'Sight Modifications',
            'Roll In Shower',
            'Ramp- Main Level',
            'Doors Swing In',
            'Doors with Lever Handled',
            'Disability Access',
            'Wheelchair Ramps',
            'Other',
        ];

        $data = $this->faker->getFeatureList('AccessibilityFeatures');

        $this->assertTrue(is_array($data));
        foreach ($data as $d) {
            $this->assertTrue(in_array($d, $access_values));
        }
    }

    public function testGenericCall()
    {
        $propertySubType = [
            'Apartment',
            'Boat Slip',
            'Single Family Residence',
            'Deeded Parking',
            'Cabin',
            'Condominium',
            'Duplex',
            'Farm',
            'Ranch',
            'Manufactured Home',
            'Mobile Home',
            'Own Your Own',
            'Quadruplex',
            'Stock Cooperative',
            'Townhouse',
            'Timeshare',
            'Triplex',
            'Manufactured On Land'
        ];

        $sub_type_value = $this->faker->getFeatureList('PropertySubType', 1);
        $this->assertTrue(in_array($sub_type_value, $propertySubType));
    }

    public function testMultipleResults()
    {
        $OperatingExpenseIncludes = [
            "Accounting",
            "Advertising",
            "Association",
            "Cable TV",
            "Capital Improvements",
            "Depreciation",
            "Equipment Rental",
            "Fuel",
            "Furniture Replacement",
            "Gardener",
            "Insurance",
            "Legal",
            "Licenses",
            "Maintenance",
            "Maintenance Grounds",
            "Maintenance Structure",
            "Manager",
            "Mortgage/Loans",
            "New Tax",
            "Other",
            "Parking",
            "Pest Control",
            "Pool/Spa",
            "Professional Management",
            "Security",
            "Snow Removal",
            "Staff",
            "Supplies",
            "Trash",
            "Utilities",
            "Vacancy Allowance",
            "Water/Sewer",
            "Workmans Compensation"
        ];

        $oei_value = $this->faker->getFeatureList('OperatingExpenseIncludes', 5);

        // make sure there's no duplicates
        $this->assertTrue(count($oei_value) == count(array_unique($oei_value)));
        $this->assertCount(5, $oei_value);

        foreach ($oei_value as $oei) {
            $this->assertContains($oei, $OperatingExpenseIncludes);
        }
    }

    public function testNonexistentField()
    {
        $fake_value = $this->faker->getFeatureList('ThisIsFake');
        $fake_value2 = $this->faker->getFeatureList('ThisIsFake', 1);
        $fake_value3 = $this->faker->getFeatureList('ThisIsFake', 5);

        $this->assertTrue(is_array($fake_value)); // can be between 1 - 4 long
        $this->assertTrue(count($fake_value2) == 1);
        $this->assertTrue(count($fake_value3) == 5);
    }

    public function testGetAll()
    {
        $values = $this->faker->getAllEnums('PropertySubType');
        $this->assertSame(18, count($values));
    }
}
